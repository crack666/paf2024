package de.vfh.paf.tasklist.domain.service;

import de.vfh.paf.tasklist.domain.model.Status;
import de.vfh.paf.tasklist.domain.model.Task;
import de.vfh.paf.tasklist.domain.model.TaskQueue;
import de.vfh.paf.tasklist.domain.model.TaskResult;
import de.vfh.paf.tasklist.domain.repository.TaskRepository;
import de.vfh.paf.tasklist.domain.repository.TaskResultRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
@ActiveProfiles("test")
@Import({TaskQueueService.class, TaskService.class, de.vfh.paf.tasklist.presentation.websocket.TaskWebSocketController.class})
class TaskQueueServiceTest {
    
    @Autowired
    private TaskQueueService taskQueueService;
    
    @Autowired
    private TaskRepository taskRepository;
    
    @Autowired
    private TaskResultRepository taskResultRepository;
    
    @Autowired
    private TaskService taskService;

    @BeforeEach
    void setUp() {
        taskRepository.deleteAll();
        taskResultRepository.deleteAll();
    }

    @Test
    void shouldCreateTaskQueue() {
        // Arrange
        String queueName = "Test Queue";
        
        // Act
        TaskQueue queue = taskQueueService.createQueue(queueName);
        
        // Assert
        assertNotNull(queue);
        assertEquals(queueName, queue.getName());
        assertEquals(0, queue.getTasks().size());
    }

    @Test
    void shouldEnqueueTask() {
        // Arrange
        TaskQueue queue = taskQueueService.createQueue("Test Queue");
        Task task = taskService.createTask("Test Task", "Description", LocalDateTime.now().plusDays(1), 100);
        
        // Act
        boolean enqueued = taskQueueService.enqueueTask(queue.getId(), task.getId());
        
        // Assert
        assertTrue(enqueued);
        assertEquals(1, queue.getTasks().size());
        assertEquals(task.getId(), queue.getTasks().get(0).getId());
        
        // Verify task status was updated
        Task updatedTask = taskRepository.findById(task.getId()).orElseThrow();
        assertEquals(Status.QUEUED, updatedTask.getStatus());
    }

    @Test
    void shouldExecuteTask() throws Exception {
        // Arrange
        TaskQueue queue = taskQueueService.createQueue("Test Queue");
        Task task = taskService.createTask("Test Task", "Description", LocalDateTime.now().plusDays(1), 100);
        taskQueueService.enqueueTask(queue.getId(), task.getId());
        
        // Act
        CompletableFuture<TaskResult> futureResult = taskQueueService.executeNextTask(queue.getId(), 
                (t) -> {
                    TaskResult result = new TaskResult();
                    result.setTitle("Current Time");
                    result.setContent(LocalDateTime.now().toString());
                    result.setTaskId(t.getId());
                    result.setTimestamp(LocalDateTime.now());
                    return result;
                });
        
        // Wait for the result with a timeout
        TaskResult result = futureResult.get(5, TimeUnit.SECONDS);
        
        // Assert
        assertNotNull(result);
        
        // With the migration to JPA, the task ID is now generated by the database
        // So we can't check for an exact match, but we can check it's not null
        assertNotNull(result.getTaskId());
        assertEquals("Current Time", result.getTitle());
        
        // Verify task status
        Task updatedTask = taskRepository.findById(task.getId()).orElseThrow();
        assertEquals(Status.DONE, updatedTask.getStatus());
        assertTrue(updatedTask.isCompleted());
    }

    @Test
    void shouldProcessAllTasksInQueue() throws Exception {
        // Arrange
        TaskQueue queue = taskQueueService.createQueue("Test Queue");
        
        Task task1 = taskService.createTask("Task 1", "Description", LocalDateTime.now().plusDays(1), 100);
        Task task2 = taskService.createTask("Task 2", "Description", LocalDateTime.now().plusDays(1), 100);
        Task task3 = taskService.createTask("Task 3", "Description", LocalDateTime.now().plusDays(1), 100);
        
        taskQueueService.enqueueTask(queue.getId(), task1.getId());
        taskQueueService.enqueueTask(queue.getId(), task2.getId());
        taskQueueService.enqueueTask(queue.getId(), task3.getId());
        
        // Act
        List<TaskResult> results = taskQueueService.processAllTasks(queue.getId(), 
                (t) -> {
                    TaskResult result = new TaskResult();
                    result.setTitle("Result for " + t.getTitle());
                    result.setContent("Success");
                    result.setTaskId(t.getId());
                    result.setTimestamp(LocalDateTime.now());
                    return result;
                }).get(5, TimeUnit.SECONDS);
        
        // Assert
        assertEquals(3, results.size());
        
        // Check results
        for (TaskResult result : results) {
            assertTrue(result.getTitle().startsWith("Result for Task"));
            assertEquals("Success", result.getContent());
        }
        
        // Verify all tasks are completed
        assertTrue(taskRepository.findById(task1.getId()).orElseThrow().isCompleted());
        assertTrue(taskRepository.findById(task2.getId()).orElseThrow().isCompleted());
        assertTrue(taskRepository.findById(task3.getId()).orElseThrow().isCompleted());
        
        // Verify queue is empty
        assertEquals(0, queue.getTasks().size());
    }
}